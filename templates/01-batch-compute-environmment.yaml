AWSTemplateFormatVersion: "2010-09-09"
Description: Creates the compute environment for job execution. Execute once per environment, starting with dev
Parameters:

  Environment:
    Description: Name of batch environment
    Type: String
    AllowedValues:
      - dev
      - test
      - prod

# TODO : TRY TO SHORTEN THIS TO A FRIENDLY NAME
  NetworkStackName:
      Description: Name of an active CloudFormation stack that contains networking resources
      Type: String
      MinLength: 1
      MaxLength: 255
      AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

Conditions:
  CreateBucketForCodePipeline: !Equals [!Ref Environment, dev]
Resources:
    # Modify this if you want to control ingress/egress
    BatchInstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Batch EC2 Security Group
        VpcId: vpc-ec394d97
        Tags:
        - Key: Name
          Value: !Sub ${Environment}-batchinstance
    BatchComputeEnvironment:
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        ComputeEnvironmentName: !Ref Environment
        Type: MANAGED
        State: ENABLED
        ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/AWSBatchServiceRole
        ComputeResources:
          MinvCpus: 0
          MaxvCpus: 256
          DesiredvCpus: 0
          Type: EC2
          InstanceRole: ecsInstanceRole
          #TODO : IDEALLY, YOU WOULD WANT TO CODE THIS INSTEAD OF RELYING ON EXISTANCE OF THIS ROLE
          SecurityGroupIds:
            - !GetAtt BatchInstanceSecurityGroup.GroupId
          InstanceTypes:
            - optimal
          Subnets:
            - subnet-0c31dc6b
            - subnet-c05a64ff
#    CloudWatchEventsSubmitBatchJobRole:
#      Type: AWS::IAM::Role
#      Properties:
#        Path: /
#        AssumeRolePolicyDocument:
#          Version: 2012-10-17
#          Statement:
#            - Effect: Allow
#              Principal:
#                Service: events.amazonaws.com
#              Action: sts:AssumeRole
#        Policies:
#          - PolicyName: s3-access
#            PolicyDocument:
#              Version: 2012-10-17
#              Statement:
#                - Resource: '*' # currently does not support resource level permissions
#                  Effect: Allow
#                  Action:
#                    - batch:SubmitJob
    DefaultJobBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${AWS::AccountId}-${Environment}-job
    CodePipelineArtifactBucket:
      Type: AWS::S3::Bucket
      Condition: CreateBucketForCodePipeline
      Properties:
        BucketName: !Sub ${AWS::AccountId}-codepipeline-artifacts
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
          Version: 2012-10-17
        Policies:
          - PolicyName: !Sub ${AWS::Region}-${AWS::StackName}-triggerlambda
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Resource: "*"
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - batch:DescribeJobs
                    - batch:ListJobs
                    - batch:SubmitJob
Outputs:
#  CloudWatchEventsSubmitBatchJobRoleArn:
#    Value: !GetAtt CloudWatchEventsSubmitBatchJobRole.Arn
#    Export:
#        Name: !Sub ${Environment}-cloudwatch-events-batch-submit-role-arn
  TriggerJobLambdaArn:
    Value: !GetAtt LambdaRole.Arn
    Export:
      Name: !Sub ${Environment}-cloudwatch-events-batch-submit-role-arn
